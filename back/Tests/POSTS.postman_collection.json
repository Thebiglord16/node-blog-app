{
	"info": {
		"_postman_id": "9984daa1-7e43-4699-ae4e-4a3a7219f1d1",
		"name": "POSTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14452752"
	},
	"item": [
		{
			"name": "Create Post test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"properties\":{\r",
							"        \"id\":{\"type\": \"integer\"},\r",
							"        \"title\":{\"type\": \"string\"},\r",
							"        \"content\":{\"type\": \"string\"},\r",
							"        \"userId\":{\"type\":\"integer\"}\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Post schema is valid', function(){\r",
							"    pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"postman.setEnvironmentVariable(\"postId\", JSON.parse(responseBody).id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\":{{userID}},\r\n    \"title\": \"Postman test post\",\r\n    \"content\": \"Pokem ipsum dolor sit amet Chikorita Dunsparce Flamethrower Rising Badge Cresselia Celadon City. Mirror Move Genesect our courage will pull us through Doduo Donphan Ground Igglybuff. Sinnoh Sneasel Pineco Girafarig Kirlia Wooper Stunfisk. Strength Dark Super Potion Banette Volcano Badge Politoed Sigilyph. Hive Badge Pokeball Dialga Zorua Igglybuff Azumarill Relicanth.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post Failed do to auth test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.unauthorized; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\":{{userID}},\r\n    \"title\": \"Postman test post\",\r\n    \"content\": \"Pokem ipsum dolor sit amet Chikorita Dunsparce Flamethrower Rising Badge Cresselia Celadon City. Mirror Move Genesect our courage will pull us through Doduo Donphan Ground Igglybuff. Sinnoh Sneasel Pineco Girafarig Kirlia Wooper Stunfisk. Strength Dark Super Potion Banette Volcano Badge Politoed Sigilyph. Hive Badge Pokeball Dialga Zorua Igglybuff Azumarill Relicanth.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\"$ref\": \"postSchema\"}\r",
							"}\r",
							"\r",
							"var postSchema = {\r",
							"    \"properties\":{\r",
							"        \"id\":{\"type\": \"integer\"},\r",
							"        \"title\":{\"type\": \"string\"},\r",
							"        \"content\":{\"type\": \"string\"},\r",
							"        \"userId\":{\"type\":\"integer\"}\r",
							"    }\r",
							"}\r",
							"\r",
							"tv4.addSchema('postSchema', postSchema);\r",
							"\r",
							"pm.test('Post schema is valid', function(){\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET one Post test ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"properties\":{\r",
							"        \"id\":{\"type\": \"integer\"},\r",
							"        \"title\":{\"type\": \"string\"},\r",
							"        \"content\":{\"type\": \"string\"},\r",
							"        \"userId\":{\"type\":\"integer\"},\r",
							"        \"User\":{\"$ref\":\"userSchema\"}\r",
							"    }\r",
							"}\r",
							"\r",
							"var userSchema = {\r",
							"    \"properties\":{\r",
							"        \"firstName\":{\"type\": \"string\"},\r",
							"        \"lastName\":{\"type\": \"string\"},\r",
							"    }\r",
							"}\r",
							"\r",
							"tv4.addSchema('userSchema', userSchema);\r",
							"\r",
							"pm.test('Post schema is valid', function(){\r",
							"    pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts/{{postId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT post failed do to auth test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.unauthorized; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/{{postId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Post test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"edited\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts/{{postId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete post failed do to auth test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.unauthorized; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/{{postId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete post test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payload must be valid and have a body\", function () { \r",
							"     pm.response.to.be.success; \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.not.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/posts/{{postId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		}
	]
}